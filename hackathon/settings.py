
# hackathon/settings.py
"""
Django settings for hackathon project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
from decouple import config # Import the config function
import dj_database_url    # Import the database url parser
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read the SECRET_KEY from the environment variable
# This will crash if SECRET_KEY is not set, which is good for production.
SECRET_KEY = config('SECRET_KEY')

# Read the DEBUG value, defaulting to False if not set.
# The `cast=bool` ensures the string "False" becomes the boolean False.
DEBUG = config('DEBUG', default=False, cast=bool)

# Read ALLOWED_HOSTS from a comma-separated string
# e.g., "mysite.com,www.mysite.com"
ALLOWED_HOSTS_str = config('ALLOWED_HOSTS', default='')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_str.split(',') if host.strip()]


# from pathlib import Path

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-p^n+2&(@rq5#b-!5q0v!$od+w=z@@_v#6l9j^&h0dkxe=nbp$h'

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', 
    'django.contrib.staticfiles',
    'submissions',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hackathon.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hackathon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Database configuration
# This is the key part for connecting to Render's PostgreSQL
default_db_url = 'sqlite:///' + str(BASE_DIR / 'db.sqlite3')
DATABASES = {
    'default': dj_database_url.config(default=default_db_url)
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# --- Static Files Configuration for Production ---
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# This is where Django will collect all static files from your apps
STATIC_ROOT = BASE_DIR / 'staticfiles' 
# This tells WhiteNoise to look for files in STATIC_ROOT
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --- Google Cloud Storage Configuration ---
# Your existing GCS configuration is good, just ensure it's below the static files part.
# The DEFAULT_FILE_STORAGE setting will handle user uploads, while the settings
# above handle your app's static files (CSS, JS).


# --- Google Cloud Storage Configuration ---
GS_BUCKET_NAME = config('GS_BUCKET_NAME', default=None)
GS_CREDENTIALS_FILE_PATH = config('GOOGLE_APPLICATION_CREDENTIALS', default=None)

if GS_BUCKET_NAME and GS_CREDENTIALS_FILE_PATH:
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    
    GS_PROJECT_ID = config('GS_PROJECT_ID', default=None) # Keep this for clarity
    
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        GS_CREDENTIALS_FILE_PATH
    )


# --- Authentication Settings ---
# Where to redirect users after a successful login
LOGIN_REDIRECT_URL = 'my_submissions' 

# Where to redirect users after they log out
LOGOUT_REDIRECT_URL = 'home'